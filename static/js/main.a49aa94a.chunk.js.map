{"version":3,"sources":["CameraInput.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["CameraInput","type","accept","id","multiple","handleClick","request","window","indexedDB","open","onupgradeneeded","store","result","createObjectStore","autoIncrement","firstData","title","author","put","onsuccess","readyState","console","log","App","onClick","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"0JAAe,SAASA,IACtB,OACE,8BACE,gCACE,uBACEC,KAAK,OACLC,OAAO,aACPC,GAAG,cACHC,UAAQ,EACR,YAAU,a,MCmBpB,SAASC,IACP,IACMC,EAAUC,OAAOC,UAAUC,KADlB,OAC+B,GAE9CH,EAAQI,gBAAkB,WACxB,IACIC,EADKL,EAAQM,OACFC,kBAAkB,OAAQ,CAAEC,eAAe,IACtDC,EAAY,CAAEC,MAAO,uBAAwBC,OAAQ,iBACzDN,EAAMO,IAAIH,GACVJ,EAAMO,IAAIH,IAGZT,EAAQa,UAAY,WACS,SAAvBb,EAAQc,YACVC,QAAQC,IAAI,0CAwBHC,MAnBf,WACE,OACE,gCACE,sDACA,cAACvB,EAAD,IACA,wBAAQwB,QAASnB,EAAjB,kCCxCAoB,EAAcC,QACW,cAA7BnB,OAAOoB,SAASC,UAEe,UAA7BrB,OAAOoB,SAASC,UAEhBrB,OAAOoB,SAASC,SAASC,MAAM,2DAqCnC,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BtB,QAAQC,IACN,+GAKEU,GAAUA,EAAOY,UACnBZ,EAAOY,SAASP,KAMlBhB,QAAQC,IAAI,sCAGRU,GAAUA,EAAOa,WACnBb,EAAOa,UAAUR,WAO5BS,OAAM,SAACC,GACN1B,QAAQ0B,MAAM,4CAA6CA,MC9FjE,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFSnB,SAAkB5B,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAI4B,IAAIC,UAAwBvD,OAAOoB,SAASoC,MACpDC,SAAWzD,OAAOoB,SAASqC,OAIvC,OAGFzD,OAAO0D,iBAAiB,QAAQ,WAC9B,IAAMlC,EAAK,UAAM+B,UAAN,sBAEPrC,IAgEV,SAAiCM,EAAOC,GAEtCkC,MAAMnC,EAAO,CACXoC,QAAS,CAAE,iBAAkB,YAE5B/B,MAAK,SAACgC,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CvC,UAAUC,cAAcuC,MAAMrC,MAAK,SAACC,GAClCA,EAAaqC,aAAatC,MAAK,WAC7B7B,OAAOoB,SAASgD,eAKpB7C,EAAgBC,EAAOC,MAG1Bc,OAAM,WACLzB,QAAQC,IAAI,oEAtFVsD,CAAwB7C,EAAOC,GAI/BC,UAAUC,cAAcuC,MAAMrC,MAAK,WACjCf,QAAQC,IACN,+GAMJQ,EAAgBC,EAAOC,OE/B/B6C,GAKA7B,K","file":"static/js/main.a49aa94a.chunk.js","sourcesContent":["export default function CameraInput() {\n  return (\n    <div>\n      <label>\n        <input\n          type=\"file\"\n          accept=\"image/jpeg\"\n          id=\"pictureTest\"\n          multiple\n          data-role=\"none\"\n        />\n      </label>\n    </div>\n  );\n}\n","import React from 'react';\nimport CameraInput from './CameraInput';\n// import Camera, { DEVICE, FACING_MODE, PLACEMENT } from 'react-camera-ios';\nimport 'react-camera-ios/build/styles.css';\n\n// const customerData = [\n//   { ssn: '444-44-4444', name: 'Bill', age: 35, email: 'bill@company.com' },\n//   { ssn: '555-55-5555', name: 'Donna', age: 32, email: 'donna@home.org' },\n// ];\n// const dbName = 'first IndexedDB';\n// const request = indexedDB.open(dbName, 1);\n\n// request.onupgradeneeded = (event) => {\n//   var db = event.request.result;\n//   var objectStore = db.createObjectStore('customers', { keyPath: 'ssn' });\n//   objectStore.createIndex('name', 'name', { unique: false });\n//   objectStore.createIndex('email', 'email', { unique: true });\n//   objectStore.transaction.oncomplete = function (event) {\n//     // Store values in the newly created objectStore.\n//     var customerObjectStore = db\n//       .transaction('customers', 'readwrite')\n//       .objectStore('customers');\n//     customerData.forEach(function (customer) {\n//       customerObjectStore.add(customer);\n//     });\n//   };\n// };\n\nfunction handleClick() {\n  const dbName = 'MyDB';\n  const request = window.indexedDB.open(dbName, 1);\n\n  request.onupgradeneeded = () => {\n    let db = request.result;\n    let store = db.createObjectStore('book', { autoIncrement: true });\n    let firstData = { title: 'A catcher in the rye', author: 'J.D. Salinger' };\n    store.put(firstData);\n    store.put(firstData);\n  };\n\n  request.onsuccess = () => {\n    if (request.readyState === 'done') {\n      console.log('Data is succesfully inserted into DB.');\n    }\n  };\n}\n\nfunction App() {\n  return (\n    <div>\n      <h1>Camera PWA prototype</h1>\n      <CameraInput />\n      <button onClick={handleClick}>Create IndexedDB</button>\n      {/* <CameraInput /> */}\n      {/* <Camera\n        device={DEVICE.TAB}\n        facingMode={FACING_MODE.ENVIRONMENT}\n        placement={PLACEMENT.CONTAIN}\n        quality=\"1\"\n        onError={(error) => console.log(error)}\n        onTakePhoto={(dataUrl) => console.log(dataUrl)}\n      /> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}