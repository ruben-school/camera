{"version":3,"sources":["DB.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["componentData","request","window","indexedDB","open","show","DataComponent","result","leverancier","App","onupgradeneeded","store","createObjectStore","keyPath","put","aankomst","colli","pallets","onsuccess","readyState","console","log","useState","showResult","setShowResult","type","accept","capture","id","multiple","onChange","e","target","files","length","file","fileUrl","URL","createObjectURL","alert","handleChange","onClick","transaction","objectStore","get","oncomplete","event","onerror","error","getData","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.4a05bd58.chunk.js","sourcesContent":["import { useState } from 'react';\n\nconst dbName = 'LocalDB';\nconst request = window.indexedDB.open(dbName, 1);\nlet componentData;\nlet show = false;\n\nexport function initDb() {\n  request.onupgradeneeded = () => {\n    let db = request.result;\n    let store = db.createObjectStore('doorvoertijden', { keyPath: 'leverancier' });\n    let firstData = { aankomst: '', colli: 2, pallets: 0, leverancier: 'Rhodius' };\n    let secondData = { aankomst: '', colli: 1, pallets: 0, leverancier: 'Test' };\n    store.put(firstData);\n    store.put(secondData);\n  };\n\n  request.onsuccess = () => {\n    if (request.readyState === 'done') {\n      console.log('Data is succesfully inserted into DB.');\n    }\n  };\n}\n\nexport function getData() {\n  const transaction = request.result.transaction(['doorvoertijden'], 'readonly');\n  const objectStore = transaction.objectStore('doorvoertijden');\n  componentData = objectStore.get('Rhodius');\n\n  transaction.oncomplete = function (event) {\n    console.log('transaction completed');\n    console.log('transaction result: ', componentData);\n    show = true;\n  };\n\n  transaction.onerror = () => {\n    console.log('Transaction not opened due to error:' + transaction.error);\n  };\n}\n\nexport default function DataComponent() {\n  if (show) {\n    return <p>{componentData.result.leverancier}</p>;\n  } else {\n    return <p></p>;\n  }\n}\n","import React, { useState } from 'react';\nimport CameraInput from './CameraInput';\nimport 'react-camera-ios/build/styles.css';\nimport DataComponent, { initDb, getData } from './DB';\n\nfunction App() {\n  initDb();\n  const [showResult, setShowResult] = useState(false);\n  const [result, setResult] = useState('');\n  function handleClick() {\n    setShowResult(!showResult);\n    console.log('extrat check', getData());\n  }\n\n  const handleChange = (target) => {\n    if (target.files) {\n      if (target.files.length !== 0) {\n        console.log('selected file: ', target.files[0]);\n        const file = target.files[0];\n        const fileUrl = URL.createObjectURL(file);\n        alert(fileUrl);\n      }\n    }\n  };\n\n  return (\n    <div>\n      <h1>Camera PWA prototype</h1>\n      <div>\n        <label>\n          <input\n            type=\"file\"\n            accept=\"image/jpeg\"\n            capture=\"user\"\n            id=\"pictureTest\"\n            multiple\n            data-role=\"none\"\n            onChange={(e) => handleChange(e.target)}\n          />\n        </label>\n      </div>\n      <button onClick={handleClick}>Show first</button>\n      <DataComponent />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}