{"version":3,"sources":["DBscript.js","CameraInput.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["db","doFile","e","console","log","file","target","files","reader","FileReader","readAsBinaryString","onload","bits","result","ob","created","Date","data","trans","transaction","objectStore","add","onerror","error","oncomplete","doImageTest","image","document","querySelector","recordToLoad","parseInt","value","get","onsuccess","record","test","str","Buffer","from","toString","src","addEventListener","request","indexedDB","open","onupgradeneeded","createObjectStore","keyPath","autoIncrement","initDb","CameraInput","type","accept","id","multiple","App","alt","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","URL","process","href","origin","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.4bb7ecab.chunk.js","sourcesContent":["let db;\nlet dbVersion = 1;\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  console.log('dom content loaded');\n\n  document.querySelector('#pictureTest').addEventListener('change', doFile);\n\n  document.querySelector('#testImageBtn').addEventListener('click', doImageTest);\n\n  initDb();\n});\n\nfunction initDb() {\n  let request = indexedDB.open('testPics', dbVersion);\n\n  request.onerror = function (e) {\n    console.error('Unable to open database.');\n  };\n\n  request.onsuccess = function (e) {\n    db = e.target.result;\n    console.log('db opened');\n  };\n\n  request.onupgradeneeded = function (e) {\n    let db = e.target.result;\n    db.createObjectStore('cachedForms', { keyPath: 'id', autoIncrement: true });\n  };\n}\n\nfunction doFile(e) {\n  console.log('change event fired for input field');\n  let file = e.target.files[0];\n  var reader = new FileReader();\n  //\t\t\t\treader.readAsDataURL(file);\n  reader.readAsBinaryString(file);\n\n  reader.onload = function (e) {\n    //alert(e.target.result);\n    let bits = e.target.result;\n    let ob = {\n      created: new Date(),\n      data: bits,\n    };\n\n    let trans = db.transaction(['cachedForms'], 'readwrite');\n    let addReq = trans.objectStore('cachedForms').add(ob);\n\n    addReq.onerror = function (e) {\n      console.log('error storing data');\n      console.error(e);\n    };\n\n    trans.oncomplete = function (e) {\n      console.log('data stored');\n    };\n  };\n}\n\nfunction doImageTest() {\n  console.log('doImageTest');\n  let image = document.querySelector('#testImage');\n  let recordToLoad = parseInt(document.querySelector('#recordToLoad').value, 10);\n  if (recordToLoad === '') recordToLoad = 1;\n\n  let trans = db.transaction(['cachedForms'], 'readonly');\n  //hard coded id\n  let req = trans.objectStore('cachedForms').get(2);\n  req.onsuccess = function (e) {\n    let record = e.target.result;\n    console.log('get success', record);\n    const test = (str) => new Buffer.from(str, 'binary').toString('base64');\n    console.log('hier is ie dan: ', test(record.data));\n    image.src = 'data:image/jpeg;base64,' + test(record.data);\n  };\n}\n","export default function CameraInput() {\n  return (\n    <div>\n      <label>\n        <input\n          type=\"file\"\n          accept=\"image/jpeg\"\n          id=\"pictureTest\"\n          multiple\n          data-role=\"none\"\n        />\n      </label>\n    </div>\n  );\n}\n","import React from 'react';\nimport CameraInput from './CameraInput';\nimport 'react-camera-ios/build/styles.css';\n// import DataComponent, { initDb, getData, getImage } from './DB';\nimport './DBscript.js';\n\nfunction App() {\n  return (\n    <div>\n      <h1>Camera PWA prototype</h1>\n      <CameraInput />\n      <h1>Test image</h1>\n      <input type=\"number\" id=\"recordToLoad\"></input>\n      <button id=\"testImageBtn\">Test image</button>\n      <img alt=\"testImage\" id=\"testImage\"></img>\n      {/* <button onClick={handleClick}>Show first</button> */}\n      {/* <DataComponent /> */}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}